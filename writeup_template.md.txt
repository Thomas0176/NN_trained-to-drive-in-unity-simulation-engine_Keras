**Behavrioal Cloning Project**

The goals / steps of this project are the following:
* Use the simulator to collect data of good driving behavior
* Build, a convolution neural network in Keras that predicts steering angles from images
* Train and validate the model with a training and validation set
* Test that the model successfully drives around track one without leaving the road
* Summarize the results with a written report

---
###Files Submitted & Code Quality

####1. Submission includes all required files and can be used to run the simulator in autonomous mode

My project includes the following files:
* model.py containing the script to create and train the model
* drive.py for driving the car in autonomous mode
* model.h5 containing a trained convolution neural network 
* writeup_report.md or writeup_report.pdf summarizing the results

####2. Submssion includes functional code
Using the Udacity provided simulator and my drive.py file, the car can be driven autonomously around the track by executing 
```sh
python drive.py model.h5
```

####3. Submission code is usable and readable

The model.py file contains the code for training and saving the convolution neural network. The file shows the pipeline I used for training and validating the model, and it contains comments to explain how the code works.

###Model Architecture and Training Strategy

####1. An appropriate model arcthiecture has been employed

The overall strategy for deriving a model architecture was to use NVIDIAs architecture as described in their paper.
I thought this model might be appropriate because it was successfully deployed before by the team from NVIDIA.

My model starts with a Batch Normilization layer.
Then I add 5 convolution layers (each with a RELU layer after to introduce nonlinearity) with 5x5 and 3x3 filter respectively. (see 'model = Sequential()' in my code)
In between each conv layer I added a dropout layer. 

The model ends with three fully connected layers.

####2. Attempts to reduce overfitting in the model

The model contains dropout layers in order to reduce overfitting.
The model was trained and validated on different data sets (driving straight as well as self recorded 'recovery' data from the side of the street) 

####3. Model parameter tuning

The model used an adam optimizer, so the learning rate was not tuned manually . 
Longer training might have caused overfitting of the model to the training set. For me the maximum performance was reached with an epoch of 2.  
I used generators to ensure that I didn't have to load entire training set into memory. 

####4. Appropriate training data

Training data was chosen to keep the vehicle driving on the road. 
To capture good driving behavior, I first recorded two laps on track one using center lane driving
I then recorded the vehicle recovering from the left side and right sides of the road back to center so that the vehicle would learn to handle situation where it is not well centered. 
I used a combination of center lane driving and recovering from the left and right sides of the road from data I gathered through manual recording.  I split up the training and validation data into 2/3 and 1/3. I finally randomly shuffled the data set.
I used this training data for training the model. The validation set helped determine if the model was over or under fitting.